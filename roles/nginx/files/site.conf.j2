map \$sent_http_content_type \$expires {
	"text/html" epoch;
	"text/html; charset=utf-8" epoch;
	default off;
}
server {
	listen 80;
	listen [::]:80;
	server_name {{ domain }};
	return 301 https://{{ domain }}\$request_uri;
}
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name {{ domain }};
	access_log off;
	error_log /var/log/nginx/{{ domain }}-error.log;
	ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
	# verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate /etc/letsencrypt/live/{{ domain }}/chain.pem;
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;
	ssl_session_tickets off;
	ssl_dhparam /etc/nginx/dhparam.pem;
	# intermediate configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;
	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;
	# OCSP stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	# Resolver IP is usually 127.0.0.1, but it's 127.0.0.53 on EC2
	resolver 127.0.0.53;
	resolver_timeout 3s;
	add_header X-Frame-Options "SAMEORIGIN";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Content-Type-Options "nosniff";
	charset utf-8;
	gzip on;
	gzip_types text/plain application/xml text/css application/javascript;
	gzip_min_length 1000;
	root $sWebRoot;
	index index.html status.html;


	{% for item in nginx_php_config  %}
	{{ item  }}
	{% endfor %}


	# Needed to display NGINX's status page
	location /nginx-status {
		stub_status on;
		access_log off;
		allow 127.0.0.1; # Only allow it if the request is made locally
		deny all;
	}
	location ~ /\.(?!well-known).* {
		deny all;
	}
}
